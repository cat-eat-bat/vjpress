import{_ as i,c as t,o as a,a4 as e}from"./chunks/framework.CPoHb7av.js";const o=JSON.parse('{"title":"使用 undertow","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/starter/undertow.md","filePath":"guide/starter/undertow.md","lastUpdated":1742880845000}'),n={name:"guide/starter/undertow.md"};function l(p,s,r,d,h,k){return a(),t("div",null,s[0]||(s[0]=[e(`<h1 id="使用-undertow" tabindex="-1">使用 undertow <a class="header-anchor" href="#使用-undertow" aria-label="Permalink to &quot;使用 undertow&quot;">​</a></h1><p><code>Undertow</code> 是一个优秀的 Web 服务器，在高并发、自定义需求、HTTP/2 等场景下具有显著优势。</p><p>Spring Boot 中使用 Undertow 的场景</p><ul><li>高并发场景： 当应用程序需要处理大量的并发请求时，Undertow 的高性能优势会非常明显。</li><li>需要自定义 HTTP 处理逻辑： Undertow 提供了灵活的 API，可以自定义拦截器、过滤器等，满足各种定制化的需求。</li><li>需要支持 HTTP/2： 如果应用程序需要利用 HTTP/2 的特性，如多路复用、头部压缩等，Undertow 是一个不错的选择。</li><li>希望减少内存占用： Undertow 相比 Tomcat 等传统 Servlet 容器，内存占用更少，适合资源受限的环境。</li></ul><p>为此，我们提供了一个组件 <code>app-starter-undertow</code> 方便切换到 undertow 容器:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;cn.piesat.v&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;app-undertow-starter&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;1.1.0-SNAPSHOT&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>其他用法和上一章节无异。</p>`,7)]))}const g=i(n,[["render",l]]);export{o as __pageData,g as default};
