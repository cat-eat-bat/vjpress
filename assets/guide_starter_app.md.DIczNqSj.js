import{_ as i,c as a,o as t,a4 as e}from"./chunks/framework.BK_Jm2_s.js";const n="/vjpress/images/api_doc.png",E=JSON.parse('{"title":"app-spring-boot-starter","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/starter/app.md","filePath":"guide/starter/app.md","lastUpdated":1758871435000}'),p={name:"guide/starter/app.md"};function h(l,s,k,d,o,r){return t(),a("div",null,[...s[0]||(s[0]=[e('<h1 id="app-spring-boot-starter" tabindex="-1">app-spring-boot-starter <a class="header-anchor" href="#app-spring-boot-starter" aria-label="Permalink to &quot;app-spring-boot-starter&quot;">​</a></h1><p>用于开发web应用的 springboot starter，在 <a href="./../quickstart.html">快速开始</a> 中已经使用过它，下面来详细介绍它的一些特性和用法.</p><h2 id="版本更新" tabindex="-1">版本更新 <a class="header-anchor" href="#版本更新" aria-label="Permalink to &quot;版本更新&quot;">​</a></h2><h3 id="_1-3-0-snapshot" tabindex="-1">1.3.0-SNAPSHOT <a class="header-anchor" href="#_1-3-0-snapshot" aria-label="Permalink to &quot;1.3.0-SNAPSHOT&quot;">​</a></h3><ul><li>接口文档升级到 openapi3 规范，引入了 springdoc， 配置项有所改变，代码中的<code>swagger</code>注解需要切换到 <code>v3</code> 规范</li></ul><h2 id="接口在线文档" tabindex="-1">接口在线文档 <a class="header-anchor" href="#接口在线文档" aria-label="Permalink to &quot;接口在线文档&quot;">​</a></h2><p>组件内引入了开源的 <code>knife4j</code> 在线文档组件，所以服务启动后，可通过 <code>ip:port/doc.html</code> 访问在线文档，大概长这样：</p><p><img src="'+n+`" alt="在线文档截图" loading="lazy"></p><h3 id="如何禁用" tabindex="-1">如何禁用 <a class="header-anchor" href="#如何禁用" aria-label="Permalink to &quot;如何禁用&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">springdoc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  swagger-ui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line highlighted"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  api-docs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line highlighted"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>默认是启用的，无需设置</p></div><h3 id="如何添加安全认证" tabindex="-1">如何添加安全认证 <a class="header-anchor" href="#如何添加安全认证" aria-label="Permalink to &quot;如何添加安全认证&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">openapi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line highlighted"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line highlighted"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">demo</span></span>
<span class="line highlighted"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Demo@1234</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>出于安全考虑，推荐所有线上服务都开启此配置</p></div><h3 id="定制展示信息" tabindex="-1">定制展示信息 <a class="header-anchor" href="#定制展示信息" aria-label="Permalink to &quot;定制展示信息&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">openapi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Sample Api</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;**示例接口描述**&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v1.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    contact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">alex</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    license</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">GPL-3.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    terms-of-service-url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://stackoverflow.com/</span></span></code></pre></div><h3 id="排除指定接口或包" tabindex="-1">排除指定接口或包 <a class="header-anchor" href="#排除指定接口或包" aria-label="Permalink to &quot;排除指定接口或包&quot;">​</a></h3><p>排除指定url：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">springdoc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> paths-to-exclude</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/test/**,/demo/v1/**</span></span></code></pre></div><blockquote><p>也可以在代码中使用注解隐藏某个接口 <code>@Operation(summary = &quot;演示xxx&quot;, hidden = true)</code></p></blockquote><p>排除特定包：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">springdoc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  packages-to-exclude</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">com.example.internal</span></span></code></pre></div><blockquote><p>如果是只想开启某些url 或 package 只需要把 <code>exclude</code> 换成 <code>match</code></p></blockquote><h2 id="接口限流" tabindex="-1">接口限流 <a class="header-anchor" href="#接口限流" aria-label="Permalink to &quot;接口限流&quot;">​</a></h2><p>内置了两个限流注解：</p><ul><li><code>@GuavaRateLimiter</code> : guava 的限流实现</li><li><code>@SentinelRateLimiter</code> : sentinel 的限流实现</li></ul><p>在需要限流的接口上添加注解:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/buy/ticket&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SentinelRateLimiter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ticket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Your got it!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><h2 id="数据脱敏" tabindex="-1">数据脱敏 <a class="header-anchor" href="#数据脱敏" aria-label="Permalink to &quot;数据脱敏&quot;">​</a></h2><p>业务开发里常常有数据脱敏的场景，实现数据脱敏的方法很多，为了保证传输过程中数据的安全性，一般需要在接口返回层就完成脱敏。</p><p>组件提供了注解 <code>@Sensitive</code> 用于对敏感字段进行脱敏处理，使用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Serializable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Sensitive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SensitiveType.ADDRESS) </span></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String address;                </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其中，内置了常用数据类型的脱敏，如 密码(<code>PASSWORD</code>)、地址(<code>ADDRESS</code>), 中文名(<code>CHINESE_NAME</code>), 身份证号(<code>ID_CARD</code>), 手机号(<code>MOBILE</code>), 邮箱地址(<code>EMAIL</code>) 当然，也支持自定制正则和 mask 字符，如:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Serializable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Sensitive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SensitiveType.EMPTY, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pattern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;(.{3})(.{6})(.{3})(.+)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">group</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mask</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String address;                </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>返回数据长这样：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jacky&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;address&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;江苏省xxxxxx区安德xxxxxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h2 id="时间字段格式化" tabindex="-1">时间字段格式化 <a class="header-anchor" href="#时间字段格式化" aria-label="Permalink to &quot;时间字段格式化&quot;">​</a></h2><p>采用 jackson 序列化数据时，默认对于 jdk8 的<code>Local</code>时间类型，不能很好的展示，现在可在配置文件中自定义返回的格式（扩展了 <code>spring.jackson</code> 配置项）</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#  自定义 jackson 返回的时间字段的格式</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  jackson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    date-format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">yyyy-MM-dd HH:mm:ss</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    time-zone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">GMT+8</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    custom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      local-date-format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">YY年MM月dd日</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      local-time-format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">HH:mm:ss</span></span></code></pre></div><h2 id="附" tabindex="-1">附 <a class="header-anchor" href="#附" aria-label="Permalink to &quot;附&quot;">​</a></h2><h3 id="swagger-v3注解变化说明" tabindex="-1">swagger v3注解变化说明 <a class="header-anchor" href="#swagger-v3注解变化说明" aria-label="Permalink to &quot;swagger v3注解变化说明&quot;">​</a></h3><table tabindex="0"><thead><tr><th>功能维度</th><th>Swagger 2 注解（已过时）</th><th>Swagger 3 注解（OpenAPI 3）</th><th>迁移备注</th></tr></thead><tbody><tr><td><strong>控制器/分组</strong></td><td><code>@Api(tags = &quot;xxx&quot;)</code></td><td><code>@Tag(name = &quot;xxx&quot;, description = &quot;xxx&quot;)</code></td><td>可重复打标签；一个控制器支持多个 <code>@Tag</code></td></tr><tr><td><strong>接口方法</strong></td><td><code>@ApiOperation(value = &quot;xxx&quot;)</code></td><td><code>@Operation(summary = &quot;xxx&quot;, description = &quot;xxx&quot;)</code></td><td>新加 <code>operationId</code>、<code>deprecated</code>、<code>security</code> 等属性</td></tr><tr><td><strong>路径参数/查询参数</strong></td><td><code>@ApiParam(value = &quot;xxx&quot;, required = true)</code></td><td><code>@Parameter(description = &quot;xxx&quot;, required = true)</code></td><td>包路径也换了：<code>io.swagger.v3.oas.annotations.*</code></td></tr><tr><td><strong>隐式参数</strong>（非 Spring 注解）</td><td><code>@ApiImplicitParam</code>/<code>@ApiImplicitParams</code></td><td>直接 <code>@Parameter</code> 放在 <code>@Operation</code> 内</td><td>3.0 不再区分“隐式”</td></tr><tr><td><strong>请求/响应体模型</strong></td><td><code>@ApiModel(description = &quot;xxx&quot;)</code> 类级别<br><code>@ApiModelProperty(notes = &quot;xxx&quot;)</code> 字段</td><td><code>@Schema(description = &quot;xxx&quot;)</code> 类＋字段通用</td><td>一个注解搞定，支持 <code>example</code>、<code>requiredMode</code>、<code>accessMode</code> 等</td></tr><tr><td><strong>响应码描述</strong></td><td><code>@ApiResponses({@ApiResponse(code = 200, message = &quot;xxx&quot;)})</code></td><td><code>@ApiResponse(responseCode = &quot;200&quot;, description = &quot;xxx&quot;)</code></td><td>字段名从 <code>code→responseCode</code>，<code>message→description</code></td></tr><tr><td><strong>忽略某接口</strong></td><td>在 <code>Docket</code> 里 <code>apis()/paths()</code> 过滤</td><td>同上，或直接在方法写 <code>@Hidden</code></td><td>更细粒度</td></tr><tr><td><strong>安全/授权</strong></td><td><code>@ApiOperation(authorizations = {@Authorization(value = &quot;jwt&quot;)})</code></td><td><code>@Operation(security = {@SecurityRequirement(name = &quot;jwt&quot;)})</code></td><td>先通过 <code>OpenAPI</code> Bean 声明 SecurityScheme，再引用</td></tr></tbody></table><p>好了，本章节就到这里，如果需要更多业务功能特性，可完善此文档添加.</p>`,43)])])}const g=i(p,[["render",h]]);export{E as __pageData,g as default};
