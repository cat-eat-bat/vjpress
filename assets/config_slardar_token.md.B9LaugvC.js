import{_ as i,c as a,o as n,a4 as t}from"./chunks/framework.CPoHb7av.js";const E=JSON.parse('{"title":"Token","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"config/slardar/token.md","filePath":"config/slardar/token.md","lastUpdated":1745559327000}'),e={name:"config/slardar/token.md"};function k(l,s,p,h,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="token" tabindex="-1">Token <a class="header-anchor" href="#token" aria-label="Permalink to &quot;Token&quot;">​</a></h1><p>主要配置token的生成策略以及jwt的相关参数设置</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">slardar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  token</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jwt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 默认 jwt 如果是自定义token策略 这里需要指定为自定义的name</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    jwt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      sign-key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 签名的key  </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      expiration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3*60*60</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 过期时间 默认 1天 单位是 秒</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MyAuth</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 请求头的 key 默认是Authorization</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    separator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">_MY_</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 生成的 token 中的分隔符 默认是 _</span></span></code></pre></div>`,3)]))}const g=i(e,[["render",k]]);export{E as __pageData,g as default};
