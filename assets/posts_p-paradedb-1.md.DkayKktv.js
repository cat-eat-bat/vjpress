import{_ as p,C as i,c as l,o as h,j as a,G as n,a4 as k,a as d}from"./chunks/framework.BK_Jm2_s.js";const C=JSON.parse('{"title":"ParadeDB 入门-1","description":"","frontmatter":{"title":"ParadeDB 入门-1","date":"2025-02-24T00:00:00.000Z","tags":["postgres","paradedb"],"outline":"deep"},"headers":[],"relativePath":"posts/p-paradedb-1.md","filePath":"posts/p-paradedb-1.md","lastUpdated":1760165486000}'),r={name:"posts/p-paradedb-1.md"};function c(o,s,E,g,F,y){const e=i("PostMeta"),t=i("PostNav");return h(),l("div",null,[s[0]||(s[0]=a("h1",{id:"paradedb-入门-1",tabindex:"-1"},[d("ParadeDB 入门-1 "),a("a",{class:"header-anchor",href:"#paradedb-入门-1","aria-label":'Permalink to "ParadeDB 入门-1"'},"​")],-1)),n(e),s[1]||(s[1]=k(`<p><a href="https://www.paradedb.com/" target="_blank" rel="noreferrer">ParadeDB</a> 是基于 Postgres 构建的现代 Elasticsearch 替代方案。专为实时、更新繁重的工作负载而构建。 有了它，不需要考虑复杂的数据同步工作，由于是 pg 扩展实现，所以具备pg数据库的事务等特性，用法也是通过 sql 语句就可以实现全文检索、聚合统计等es中的功能。</p><blockquote><p>注： 目前该扩展仍在开发中，可在一些小型项目中进行尝试，另外，社区版目前无法支持集群化部署，但是否可以通过 Citus 来构建分布式环境，还需要进行验证。</p></blockquote><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>支持多种安装方式，最方便的还是docker安装：</p><p>选择<code>pg15</code>版本的镜像:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> paradedb/paradedb:latest-pg15</span></span></code></pre></div><p>运行容器：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> paradedb</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POSTGRES_USER=myuser</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POSTGRES_PASSWORD=mypassword</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POSTGRES_DB=mydatabase</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> paradedb_data:/var/lib/postgresql/data/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 5432:5432</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  paradedb/paradedb:latest-pg15</span></span></code></pre></div><h2 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h2><p>ParadeDB 附带一个数据库存储过程，该过程会创建一个填充了模拟数据的表，以帮助测试入门。与 psql 连接后，运行以下命令以创建并检查此表。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CALL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> paradedb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">create_bm25_test_table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  schema_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;public&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  table_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mock_items&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rating, category</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mock_items</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LIMIT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>建立字段搜索需要的索引</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> search_idx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mock_items</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">USING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bm25 (id, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, category, rating, in_stock, created_at, metadata, weight_range)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WITH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key_field</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>检索：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rating, category, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">paradedb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">score</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mock_items</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @@@ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;shoes&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> OR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> category @@@ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;footwear&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rating @@@ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&gt;2&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DESC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">description</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LIMIT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>返回根据得分排序的数据</p><h2 id="分词" tabindex="-1">分词 <a class="header-anchor" href="#分词" aria-label="Permalink to &quot;分词&quot;">​</a></h2><p>影响全文检索结果的最显著的就是采用哪种分词方式，paradedb 默认支持多种分词器，可以通过以下 sql 查看：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM paradedb.tokenizers();</span></span></code></pre></div><p>返回的有：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>default</span></span>
<span class="line"><span>raw</span></span>
<span class="line"><span>en_stem</span></span>
<span class="line"><span>stem</span></span>
<span class="line"><span>lowercase</span></span>
<span class="line"><span>white_space</span></span>
<span class="line"><span>regex_tokenizer</span></span>
<span class="line"><span>chinese_compatible</span></span>
<span class="line"><span>source_code</span></span>
<span class="line"><span>ngram</span></span>
<span class="line"><span>chinese_lindera</span></span>
<span class="line"><span>japanese_lindera</span></span>
<span class="line"><span>korean_lindera</span></span>
<span class="line"><span>icu</span></span></code></pre></div><p>默认采用的是 <code>default</code></p><h3 id="default" tabindex="-1">default <a class="header-anchor" href="#default" aria-label="Permalink to &quot;default&quot;">​</a></h3><p>通过拆分空格和标点符号来对文本进行标记，过滤掉大于 255 字节的标记，并转换为小写</p><h3 id="white-space" tabindex="-1">white_space <a class="header-anchor" href="#white-space" aria-label="Permalink to &quot;white_space&quot;">​</a></h3><p>与 default 类似，但仅基于空格进行拆分。筛选掉大于 255 字节的令牌并转换为小写 使用：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> search_idx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mock_items</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">USING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bm25 (id, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WITH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    key_field </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    text_fields </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{</span></span>
<span class="line highlighted"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;description&quot;: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;tokenizer&quot;: {&quot;type&quot;: &quot;whitespace&quot;}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="raw" tabindex="-1">raw <a class="header-anchor" href="#raw" aria-label="Permalink to &quot;raw&quot;">​</a></h3><p>将整个文本视为单个标记。筛选出大于 255 字节的标记并转换为小写</p><h3 id="regex-tokenizer" tabindex="-1">regex_tokenizer <a class="header-anchor" href="#regex-tokenizer" aria-label="Permalink to &quot;regex_tokenizer&quot;">​</a></h3><p>使用正则表达式对文本进行标记。可以使用 pattern 参数指定正则表达式。例如，<code>\\\\W+</code> 在非单词字符上进行拆分</p><p>启用：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> search_idx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mock_items</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">USING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bm25 (id, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WITH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    key_field </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    text_fields </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;description&quot;: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;tokenizer&quot;: {&quot;type&quot;: &quot;regex&quot;, &quot;pattern&quot;: &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">W+&quot;}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="chinese-compatible" tabindex="-1">chinese_compatible <a class="header-anchor" href="#chinese-compatible" aria-label="Permalink to &quot;chinese_compatible&quot;">​</a></h3><p>chinese_compatible 分词器通过将每个 CJK（中文、日语、韩语）字符视为单个词元， 并将非 CJK 字符分组为单个词元来执行简单的字符拆分。非字母数字字符（如标点符号）将被忽略，并且不会包含在任何令牌中</p><p>启用：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> search_idx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mock_items</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">USING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bm25 (id, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WITH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    key_field </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    text_fields </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;description&quot;: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;tokenizer&quot;: {&quot;type&quot;: &quot;chinese_compatible&quot;}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="chinese-lindera" tabindex="-1">chinese_lindera <a class="header-anchor" href="#chinese-lindera" aria-label="Permalink to &quot;chinese_lindera&quot;">​</a></h3><p>Lindera 分词器是一种更高级的 CJK 分词器，它使用预构建的中文、日文或韩文词典将文本分解为有意义的词元（单词或短语），而不是单个字符 chinese_lindera 是针对中文的 lindera 分词器</p><h3 id="source-code" tabindex="-1">source_code <a class="header-anchor" href="#source-code" aria-label="Permalink to &quot;source_code&quot;">​</a></h3><p>source_code 分词器通过根据代码中常用的大小写约定（如 camelCase 或 PascalCase）进行拆分来对文本进行标记。筛选出超过 255 字节的标记，并使用 ASCII 折叠将其转换为小写</p><p>启用：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> search_idx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mock_items</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">USING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bm25 (id, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WITH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    key_field </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    text_fields </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;description&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;tokenizer&quot;: {&quot;type&quot;: &quot;source_code&quot;}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="查询" tabindex="-1">查询 <a class="header-anchor" href="#查询" aria-label="Permalink to &quot;查询&quot;">​</a></h2><p>ParadeDB 中使用 <code>@@@</code> 来进行全文检索，意思是“查找与全文查询匹配的所有行”。 <code>@@@</code> 接受两种类型的查询：</p><h3 id="query-string-syntax-查询字符串语法" tabindex="-1">Query String Syntax 查询字符串语法 <a class="header-anchor" href="#query-string-syntax-查询字符串语法" aria-label="Permalink to &quot;Query String Syntax  查询字符串语法&quot;">​</a></h3><p>语法：<code>@@@</code> 的左侧是<strong>要搜索的字段</strong>，右侧是查询字符串。 例如，以下查询返回 description 字段与查询 shoes 匹配的所有行</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rating, category</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mock_items</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @@@ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;shoes&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><blockquote><p>此语法对 ORM 和预编译语句友好, 但可读性略差</p></blockquote><div class="tip custom-block"><p class="custom-block-title">特殊字符</p><p>特殊字符 <code>+</code> 、<code> ^</code> 、<code> &#39;</code>、 <code>：</code>、 <code>{</code>、 <code>}</code>、 <code>“</code>、 <code>[</code> 、 <code>]</code> 、 <code>（</code>、<code> ）</code>、<code> &lt;</code>、<code> &gt;</code>、<code>~</code> 、<code> ！</code> 、<code> \\\\</code> 、 <code>\\*</code> 和 空格<code>SPACE</code> 必须在查询词内用 <code>\\</code> 转义</p></div><h3 id="query-builder-syntax-查询生成器语法" tabindex="-1">Query Builder Syntax 查询生成器语法 <a class="header-anchor" href="#query-builder-syntax-查询生成器语法" aria-label="Permalink to &quot;Query Builder Syntax  查询生成器语法&quot;">​</a></h3><p><code>@@@</code> 的左侧是<strong>键字段</strong>，右侧是查询生成器函数或 JSON 对象。此语法对于捕获无法由查询字符串表示的更复杂的查询类型（如模糊匹配或术语级搜索）是必需的 示例：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-O35qh" id="tab-AMOc4Pq" checked><label data-title="查询函数语法" for="tab-AMOc4Pq">查询函数语法</label><input type="radio" name="group-O35qh" id="tab-hwMrJwh"><label data-title="JSON 对象语法" for="tab-hwMrJwh">JSON 对象语法</label></div><div class="blocks"><div class="language-sql vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rating, category</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mock_items</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id @@@ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">paradedb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;description&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;shoes&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rating, category</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mock_items</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id @@@</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;match&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;field&quot;: &quot;description&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;value&quot;: &quot;shoes&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::jsonb;</span></span></code></pre></div></div></div><blockquote><p>注意上述两种语法的最主要区别，<code>@@@</code> 左侧字段类型不同</p></blockquote>`,54)),n(t)])}const b=p(r,[["render",c]]);export{C as __pageData,b as default};
