import{_ as t,C as i,c as e,o as p,j as a,G as n,a4 as k,a as r}from"./chunks/framework.DUGjnzQQ.js";const b=JSON.parse('{"title":"Java 实现单例模式的几种方式","description":"","frontmatter":{"title":"Java 实现单例模式的几种方式","date":"2025-02-17T00:00:00.000Z","tags":["设计模式","单例"],"outline":"deep"},"headers":[],"relativePath":"posts/p-singleton.md","filePath":"posts/p-singleton.md","lastUpdated":1748050984000}'),d={name:"posts/p-singleton.md"};function E(o,s,g,c,y,u){const l=i("PostMeta"),h=i("PostNav");return p(),e("div",null,[s[0]||(s[0]=a("h1",{id:"java-实现单例模式的几种方式",tabindex:"-1"},[r("Java 实现单例模式的几种方式 "),a("a",{class:"header-anchor",href:"#java-实现单例模式的几种方式","aria-label":'Permalink to "Java 实现单例模式的几种方式"'},"​")],-1)),n(l),s[1]||(s[1]=k(` <p>单例模式是一种创建型设计模式，它确保一个类只有一个实例，并提供一个全局访问点。在 Java 中，有多种方式可以实现单例模式，下面将介绍其中几种常见的方式：</p><h2 id="_1-饿汉式" tabindex="-1">1. 饿汉式 <a class="header-anchor" href="#_1-饿汉式" aria-label="Permalink to &quot;1. 饿汉式&quot;">​</a></h2><h3 id="_1-1-描述" tabindex="-1">1.1 描述 <a class="header-anchor" href="#_1-1-描述" aria-label="Permalink to &quot;1.1 描述&quot;">​</a></h3><p>饿汉式在类加载时就完成了实例的初始化，因此是线程安全的。</p><h3 id="_1-2-代码示例" tabindex="-1">1.2 代码示例 <a class="header-anchor" href="#_1-2-代码示例" aria-label="Permalink to &quot;1.2 代码示例&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Singleton instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Singleton </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instance;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_1-3-优点" tabindex="-1">1.3 优点 <a class="header-anchor" href="#_1-3-优点" aria-label="Permalink to &quot;1.3 优点&quot;">​</a></h3><ul><li>线程安全，简单易懂。</li></ul><h3 id="_1-4-缺点" tabindex="-1">1.4 缺点 <a class="header-anchor" href="#_1-4-缺点" aria-label="Permalink to &quot;1.4 缺点&quot;">​</a></h3><ul><li>实例在类加载时就创建，如果该实例一直没有被使用，则会造成内存浪费。</li></ul><h2 id="_2-懒汉式" tabindex="-1">2. 懒汉式 <a class="header-anchor" href="#_2-懒汉式" aria-label="Permalink to &quot;2. 懒汉式&quot;">​</a></h2><h3 id="_2-1-描述" tabindex="-1">2.1 描述 <a class="header-anchor" href="#_2-1-描述" aria-label="Permalink to &quot;2.1 描述&quot;">​</a></h3><p>懒汉式在第一次被使用时才进行初始化，因此具有延迟加载的特性。但是，懒汉式在多线程环境下需要进行同步处理，否则可能会出现线程安全问题。</p><h3 id="_2-2-代码示例" tabindex="-1">2.2 代码示例 <a class="header-anchor" href="#_2-2-代码示例" aria-label="Permalink to &quot;2.2 代码示例&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Singleton instance;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Singleton </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instance;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-3-优点" tabindex="-1">2.3 优点 <a class="header-anchor" href="#_2-3-优点" aria-label="Permalink to &quot;2.3 优点&quot;">​</a></h3><ul><li>延迟加载，可以节省内存空间。</li></ul><h3 id="_2-4-缺点" tabindex="-1">2.4 缺点 <a class="header-anchor" href="#_2-4-缺点" aria-label="Permalink to &quot;2.4 缺点&quot;">​</a></h3><ul><li>需要进行同步处理，性能较低。</li></ul><h2 id="_3-双重校验锁-dcl" tabindex="-1">3. 双重校验锁（DCL） <a class="header-anchor" href="#_3-双重校验锁-dcl" aria-label="Permalink to &quot;3. 双重校验锁（DCL）&quot;">​</a></h2><h3 id="_3-1-描述" tabindex="-1">3.1 描述 <a class="header-anchor" href="#_3-1-描述" aria-label="Permalink to &quot;3.1 描述&quot;">​</a></h3><p>双重校验锁结合了懒汉式和饿汉式的优点，既实现了延迟加载，又保证了线程安全。</p><h3 id="_3-2-代码示例" tabindex="-1">3.2 代码示例 <a class="header-anchor" href="#_3-2-代码示例" aria-label="Permalink to &quot;3.2 代码示例&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> volatile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Singleton instance;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Singleton </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Singleton result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instance;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Singleton.class) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instance;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instance;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-3-优点" tabindex="-1">3.3 优点 <a class="header-anchor" href="#_3-3-优点" aria-label="Permalink to &quot;3.3 优点&quot;">​</a></h3><ul><li>延迟加载，节省内存空间。</li><li>线程安全，性能较高。</li></ul><h3 id="_3-4-缺点" tabindex="-1">3.4 缺点 <a class="header-anchor" href="#_3-4-缺点" aria-label="Permalink to &quot;3.4 缺点&quot;">​</a></h3><ul><li>实现较为复杂，需要理解 volatile 关键字的作用。</li></ul><h2 id="_4-静态内部类" tabindex="-1">4. 静态内部类 <a class="header-anchor" href="#_4-静态内部类" aria-label="Permalink to &quot;4. 静态内部类&quot;">​</a></h2><h3 id="_4-1-描述" tabindex="-1">4.1 描述 <a class="header-anchor" href="#_4-1-描述" aria-label="Permalink to &quot;4.1 描述&quot;">​</a></h3><p>静态内部类利用类加载机制保证线程安全，同时实现了延迟加载。</p><h3 id="_4-2-代码示例" tabindex="-1">4.2 代码示例 <a class="header-anchor" href="#_4-2-代码示例" aria-label="Permalink to &quot;4.2 代码示例&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SingletonHolder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Singleton INSTANCE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Singleton </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SingletonHolder.INSTANCE;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_4-3-优点" tabindex="-1">4.3 优点 <a class="header-anchor" href="#_4-3-优点" aria-label="Permalink to &quot;4.3 优点&quot;">​</a></h3><ul><li>延迟加载，节省内存空间。</li><li>线程安全，性能较高。</li><li>实现简单。</li></ul><h3 id="_4-4-缺点" tabindex="-1">4.4 缺点 <a class="header-anchor" href="#_4-4-缺点" aria-label="Permalink to &quot;4.4 缺点&quot;">​</a></h3><ul><li>需要了解静态内部类的加载机制。</li></ul><h2 id="_5-枚举" tabindex="-1">5. 枚举 <a class="header-anchor" href="#_5-枚举" aria-label="Permalink to &quot;5. 枚举&quot;">​</a></h2><h3 id="_5-1-描述" tabindex="-1">5.1 描述 <a class="header-anchor" href="#_5-1-描述" aria-label="Permalink to &quot;5.1 描述&quot;">​</a></h3><p>枚举类型是 JDK 1.5 引入的新特性，利用枚举可以简单地实现单例模式，并且可以防止反序列化重新创建对象。</p><h3 id="_5-2-代码示例" tabindex="-1">5.2 代码示例 <a class="header-anchor" href="#_5-2-代码示例" aria-label="Permalink to &quot;5.2 代码示例&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    INSTANCE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_5-3-优点" tabindex="-1">5.3 优点 <a class="header-anchor" href="#_5-3-优点" aria-label="Permalink to &quot;5.3 优点&quot;">​</a></h3><ul><li>实现简单。</li><li>线程安全。</li><li>可以防止反序列化重新创建对象。</li></ul><h3 id="_5-4-缺点" tabindex="-1">5.4 缺点 <a class="header-anchor" href="#_5-4-缺点" aria-label="Permalink to &quot;5.4 缺点&quot;">​</a></h3><ul><li>不能延迟加载。</li></ul>`,47)),n(h)])}const _=t(d,[["render",E]]);export{b as __pageData,_ as default};
