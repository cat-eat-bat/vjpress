import{_ as l,C as o,c as a,o as p,j as t,G as d,a4 as i,a as s}from"./chunks/framework.YUHsd1In.js";const v=JSON.parse('{"title":"docker run 命令详解","description":"","frontmatter":{"title":"docker run 命令详解","date":"2025-03-04T00:00:00.000Z","tags":["docker"],"outline":"deep"},"headers":[],"relativePath":"posts/p-docker-run.md","filePath":"posts/p-docker-run.md","lastUpdated":1750153648000}'),n={name:"posts/p-docker-run.md"};function u(_,e,m,k,f,P){const r=o("PostMeta"),c=o("PostNav");return p(),a("div",null,[e[0]||(e[0]=t("h1",{id:"docker-run-命令详解",tabindex:"-1"},[s("docker run 命令详解 "),t("a",{class:"header-anchor",href:"#docker-run-命令详解","aria-label":'Permalink to "docker run 命令详解"'},"​")],-1)),d(r),e[1]||(e[1]=i(" <p>docker run 命令是 Docker 中最核心的命令之一，用于创建并运行一个新的容器。它提供了丰富的参数选项，可以让你对容器的运行方式进行精细控制。 以下是一些常用的 docker run 参数及其解释</p><ul><li><p><code>-d</code>: 在后台（守护进程模式）运行容器</p></li><li><p><code>-it</code>: 创建一个交互式的 shell 会话 允许你与容器进行交互，例如运行命令</p></li><li><p><code>--name</code>: 为容器指定一个名称, 方便管理</p></li><li><p><code>--rm</code>: 容器运行结束后自动删除，避免保留无用的已停止容器 节省磁盘空间</p></li><li><p><code>-p</code>: 主机端口映射 如 <code>-p 8000:80</code></p></li><li><p><code>--network</code>: 将容器连接到指定的网络 允许容器与其他容器或主机进行通信</p></li><li><p><code>-v</code>: 挂载一个卷，用于持久化存储数据，格式为 主机路径:容器路径，例如 -v /data:/app/data</p></li><li><p><code>--mount</code>: 挂载文件系统，docker volume，或者tmpfs</p></li><li><p><code>-e</code>: 设置环境变量, 格式为 变量名=变量值，例如 -e MYSQL_ROOT_PASSWORD=secret</p></li><li><p><code>--cpus</code>: 限制容器使用的 CPU 数量</p></li><li><p><code>--memory</code>: 限制容器使用的内存量</p></li><li><p><code>--restart</code>: 用于指定容器的重启策略，</p><ul><li>no: 默认值，即不会重启</li><li>on-failure[:max-retries] ：仅当容器以非零退出代码退出（表示错误）时，才会重启容器，可以选择指定最大重启尝试次数（例如，on-failure:5）</li><li>always：无论退出代码如何，容器都将始终重启</li><li>unless-stopped：除非用户明确停止容器，否则容器将重启</li></ul></li></ul>",3)),d(c)])}const N=l(n,[["render",u]]);export{v as __pageData,N as default};
