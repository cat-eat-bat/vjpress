import{_ as i,C as e,c as p,o as l,j as s,G as t,a4 as r,a as d}from"./chunks/framework.CPoHb7av.js";const S=JSON.parse('{"title":"Sedona 入门","description":"","frontmatter":{"title":"Sedona 入门","date":"2025-04-20T00:00:00.000Z","tags":["sedona","spark"],"outline":"deep"},"headers":[],"relativePath":"posts/p-sedona-1.md","filePath":"posts/p-sedona-1.md","lastUpdated":1745551184000}'),h={name:"posts/p-sedona-1.md"};function c(k,a,u,b,g,m){const o=e("PostMeta"),n=e("PostNav");return l(),p("div",null,[a[0]||(a[0]=s("h1",{id:"apache-sedona-入门",tabindex:"-1"},[d("Apache Sedona 入门 "),s("a",{class:"header-anchor",href:"#apache-sedona-入门","aria-label":'Permalink to "Apache Sedona 入门"'},"​")],-1)),t(o),a[1]||(a[1]=r(`<h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p><a href="https://sedona.apache.org/latest/" target="_blank" rel="noreferrer">Apache Sedona</a> 是一种用于处理大规模空间数据的集群计算系统，通过提供一系列开箱即用的分布式空间数据集和空间 SQL，扩展了现有的集群计算系统，如 Apache Spark、Apache Flink 和 Snowflake，这些系统可以高效地在机器间加载、处理和分析大规模空间数据。</p><p>主要架构如下：</p><p><img src="https://sedona.apache.org/latest/image/sedona-ecosystem.png" alt="" loading="lazy"></p><p>Sedona 目前支持三个分布式平台： <code>Spark</code> <code>Flink</code> <code>Snowflake</code></p><blockquote><p>本文以 <code>spark</code> 平台为例</p></blockquote><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><h3 id="基础环境" tabindex="-1">基础环境 <a class="header-anchor" href="#基础环境" aria-label="Permalink to &quot;基础环境&quot;">​</a></h3><ul><li>spark</li><li>java</li><li>maven</li></ul><h4 id="spark" tabindex="-1">spark <a class="header-anchor" href="#spark" aria-label="Permalink to &quot;spark&quot;">​</a></h4><p>采用单机伪集群模式，本机作为<code>master</code>角色，同时作为一个 <code>worker</code> 角色，需要修改环境变量：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> conf/spark-env.sh</span></span></code></pre></div><p>添加以下变量值：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export SPARK_MASTER_HOST=localhost</span></span>
<span class="line"><span>export SPARK_MASTER_PORT=7077</span></span>
<span class="line"><span>export SPARK_MASTER_WEBUI_PORT=8088</span></span></code></pre></div><p>分别启动 master 和 worker:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sbin/start-master.sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sbin/start-worker.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spark://localhost:7077</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1G</span></span></code></pre></div><blockquote><p>这里 <code>worker</code> 指定了 cores 为 4 内存为 1GB</p></blockquote><p>可以访问 <code>http://localhost:8088/</code> 查看 spark web 页面</p><h4 id="添加-sedona-jars" tabindex="-1">添加 sedona jars <a class="header-anchor" href="#添加-sedona-jars" aria-label="Permalink to &quot;添加 sedona jars&quot;">​</a></h4><p>将对应版本的jar包拷贝到 <code>\${SPARK_HOME}/jars</code></p><p><code>sedona-spark-shaded-3.5_2.12-1.7.1.jar</code> <code>geotools-wrapper-1.7.1-28.5.jar</code></p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2>`,22)),t(n)])}const v=i(h,[["render",c]]);export{S as __pageData,v as default};
